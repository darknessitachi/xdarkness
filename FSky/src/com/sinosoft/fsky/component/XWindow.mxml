<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300">
	
	<fx:Metadata>
		[Event(name="myClose")]
		[Event(name="myMax")]
		[Event(name="myMin")]
		[Event(name="myRestore")]
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			 
			import mx.managers.CursorManager;
			import mx.controls.Button;
			import mx.core.Application;
			
			private var btnClose:Button; //关闭按钮
			private var btnMin:Button; //最小化按钮
			private var btnMax:Button; //最大化按钮
			private var btnRestore:Button; //还原按钮
			private var theStatus:int=0; //窗口状态，0正常 1最大化 2最小化；
			private var isReSize:Boolean; //是否允许缩放
			private var theMinWidth:Number=200; //窗口最小宽度
			private var theMinHeight:Number=200; //窗口最大高度
			private var theOldPoint:Point; //改变大小前窗口的x，y坐标
			private var theOldWidth:Number; //最大最小化时的宽
			private var theOldHeight:Number; //最大最小化时的高
			
			private var mouseMargin:Number=4; //响应范围
			//设置光标的位置值 右上：3  右下：6 左下：11  左上8
			private var theSide:Number=0;
			private var SIDE_OTHER:Number=0;
			private var SIDE_TOP:Number=1;
			private var SIDE_RIGHT:Number=2;
			private var SIDE_LEFT:Number=7;
			private var SIDE_BOTTOM:Number=4;
			
			//当前鼠标光标类
			public var currentType:Class=null;
			//按钮图标
			[Embed("/assets/images/window/Buttonclose.png")]
			private var IconClose:Class;
			[Embed("/assets/images/window/Buttonmaximize.png")]
			private var IconMax:Class;
			[Embed("/assets/images/window/Buttonminimize.png")]
			private var IconMin:Class;
			[Embed("/assets/images/window/Buttonrestore.png")]
			private var IconRestore:Class;
			
			//鼠标光标图标
			[Embed("/assets/images/window/resizeCursorH.gif")]
			private var CursorH:Class;
			[Embed("/assets/images/window/resizeCursorTLBR.gif")]
			private var CursorR:Class;
			[Embed("/assets/images/window/resizeCursorTRBL.gif")]
			private var CursorL:Class;
			[Embed("/assets/images/window/resizeCursorV.gif")]
			private var CursorV:Class;
			private var CursorNull:Class=null;
			
			protected override function createChildren():void
			{
				super.createChildren();
				btnClose=new Button(); //关闭按钮
				btnMin=new Button(); //最小化按钮
				btnMax=new Button(); //最大化按钮
				btnRestore=new Button(); //还原按钮
				//设置按钮的样式
				btnClose.setStyle("upIcon", IconClose);
				btnMin.setStyle("upIcon", IconMin);
				btnMax.setStyle("upIcon", IconMax);
				btnRestore.setStyle("upIcon", IconRestore);
				btnClose.setStyle("downIcon", IconClose);
				btnMin.setStyle("downIcon", IconMin);
				btnMax.setStyle("downIcon", IconMax);
				btnRestore.setStyle("downIcon", IconRestore);
				btnClose.setStyle("overIcon", IconClose);
				btnMin.setStyle("overIcon", IconMin);
				btnMax.setStyle("overIcon", IconMax);
				btnRestore.setStyle("overIcon", IconRestore);
				//加载按钮
				
//				rawChildren.addChild(btnClose);
//				rawChildren.addChild(btnMin);
//				rawChildren.addChild(btnMax);
//				rawChildren.addChild(btnRestore);
				//监听按钮事件
				btnClose.addEventListener(MouseEvent.CLICK, onCloseClick);
				btnMin.addEventListener(MouseEvent.CLICK, onMinClick);
				btnMax.addEventListener(MouseEvent.CLICK, onMaxClick);
				btnRestore.addEventListener(MouseEvent.CLICK, onReClick);
				btnRestore.visible=false;
				//侦听拖拽相关的事件
				this.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMove);
				this.addEventListener(MouseEvent.MOUSE_OUT, onMouseOut);
				this.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);
			}
			
			protected override function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				//按钮布局
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				var AssetClose:DisplayObject=btnClose.getChildByName("upIcon");
				var AssetWidth:int=AssetClose.width + 5;
				var AssetHeight:int=AssetClose.height + 5;
				//设置按钮样式
				btnClose.setActualSize(AssetWidth, AssetHeight);
				btnMin.setActualSize(AssetWidth, AssetHeight);
				btnMax.setActualSize(AssetWidth, AssetHeight);
				btnRestore.setActualSize(AssetWidth, AssetHeight);
				var fromTop:int=10;
				var fromRight:int=10;
				var theX:int=unscaledWidth - AssetWidth - fromRight;
				var theY:int=fromTop;
				btnClose.move(theX, theY);
				btnMax.move(theX - 18, theY);
				btnMin.move(theX - 34, theY);
				btnRestore.move(theX - 18, theY);
			}
			
			private function onCloseClick(event:MouseEvent):void
			{
				btnMax.visible=true;
				btnRestore.visible=false;
				theStatus=0;
				this.dispatchEvent(new Event("myClose"));
			}
			
			private function onMinClick(event:MouseEvent):void
			{
				onSaveRestore();
				this.dispatchEvent(new Event("myMin"));
				theStatus=2;
			}
			
			private function onMaxClick(event:MouseEvent):void
			{
				onSaveRestore();
				this.dispatchEvent(new Event("myMax"));
				this.isPopUp=false;
				btnMax.visible=false;
				btnRestore.visible=true;
				theStatus=1;
			}
			
			private function onReClick(event:MouseEvent):void
			{
				onGetRestore();
				this.dispatchEvent(new Event("myRestore"));
				this.isPopUp=true;
				btnMax.visible=true;
				btnRestore.visible=false;
				theStatus=0;
			}
			
			private function onMouseUp(event:MouseEvent):void
			{
				if (isReSize)
				{
					Application.application.parent.removeEventListener(MouseEvent.MOUSE_UP, onMouseUp);
					Application.application.parent.removeEventListener(MouseEvent.MOUSE_MOVE, onResize);
					isReSize=false;
				}
				onChangeCursor(CursorNull);
			}
			
			private function onMouseDown(event:MouseEvent):void
			{
				if (theSide != 0)
				{
					isReSize=true;
					Application.application.parent.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);
					Application.application.parent.addEventListener(MouseEvent.MOUSE_MOVE, onResize);
					var point:Point=new Point();
					point=this.localToContent(point);
					theOldPoint=point;
				}
			}
			
			private function onResize(event:MouseEvent):void
			{
				if (isReSize)
				{
					var xPlus:Number=Application.application.parent.mouseX - this.x;
					var yPlus:Number=Application.application.parent.mouseY - this.y;
					switch (theSide)
					{
						case SIDE_RIGHT + SIDE_BOTTOM:
							this.width=xPlus > theMinWidth ? xPlus : theMinWidth;
							this.height=yPlus > theMinHeight ? yPlus : theMinHeight;
							break;
						case SIDE_LEFT + SIDE_TOP:
							this.width=this.width - xPlus > theMinWidth ? this.width - xPlus : theMinWidth;
							this.height=this.height - yPlus > theMinHeight ? this.height - yPlus : theMinHeight;
							this.x=this.width > theMinWidth ? Application.application.parent.mouseX : this.x;
							this.y=this.height > theMinHeight ? Application.application.parent.mouseY : this.y;
							break;
						case SIDE_LEFT + SIDE_BOTTOM:
							this.width=this.width - xPlus > theMinWidth ? this.width - xPlus : theMinWidth;
							this.height=yPlus > theMinHeight ? yPlus : theMinHeight;
							this.x=this.width > theMinWidth ? Application.application.parent.mouseX : this.x;
							break;
						case SIDE_RIGHT + SIDE_TOP:
							this.width=xPlus > theMinWidth ? xPlus : theMinWidth;
							this.height=this.height - yPlus > theMinHeight ? this.height - yPlus : theMinHeight;
							this.y=this.height > theMinHeight ? Application.application.parent.mouseY : this.y;
							break;
						case SIDE_RIGHT:
							this.width=xPlus > theMinWidth ? xPlus : theMinWidth;
							break;
						case SIDE_LEFT:
							this.width=this.width - xPlus > theMinWidth ? this.width - xPlus : theMinWidth;
							this.x=this.width > theMinWidth ? Application.application.parent.mouseX : this.x;
							break;
						case SIDE_BOTTOM:
							this.height=yPlus > theMinHeight ? yPlus : theMinHeight;
							break;
						case SIDE_TOP:
							this.height=this.height - yPlus > theMinHeight ? this.height - yPlus : theMinHeight;
							this.y=this.height > theMinHeight ? Application.application.parent.mouseY : this.y;
							break;
					}
				}
				
			}
			
			private function onMouseOut(event:MouseEvent):void
			{
				if (!isReSize && this.theStatus == 0)
				{
					theSide=0;
					onChangeCursor(CursorNull);
					this.isPopUp=true;
				}
			}
			
			private function onMouseMove(event:MouseEvent):void
			{
				if (!theStatus)
				{
					var point:Point=new Point();
					point=this.localToGlobal(point);
					var xPosition:Number=Application.application.parent.mouseX;
					var yPosition:Number=Application.application.parent.mouseY;
					if (xPosition >= (point.x + this.width - mouseMargin) && yPosition >= (point.y + this.height - mouseMargin))
					{ //右下
						onChangeCursor(CursorR, -9, -9);
						theSide=SIDE_RIGHT + SIDE_BOTTOM;
						this.isPopUp=false;
					}
					else if (xPosition <= (point.x + mouseMargin) && yPosition <= (point.y + mouseMargin))
					{ //左上
						onChangeCursor(CursorR, -9, -9);
						theSide=SIDE_LEFT + SIDE_TOP;
						this.isPopUp=false;
					}
					else if (xPosition <= (point.x + mouseMargin) && yPosition >= (point.y + this.height - mouseMargin))
					{ //左下
						onChangeCursor(CursorL, -9, -9);
						theSide=SIDE_BOTTOM + SIDE_LEFT;
						this.isPopUp=false;
					}
					else if (xPosition >= (point.x + this.width - mouseMargin) && yPosition <= (point.y + mouseMargin))
					{ //右上
						onChangeCursor(CursorL, -9, -9);
						theSide=SIDE_RIGHT + SIDE_TOP;
						this.isPopUp=false;
					}
					else if (xPosition > (point.x + this.width - mouseMargin))
					{ //右
						onChangeCursor(CursorH, -9, -9);
						theSide=SIDE_RIGHT;
						this.isPopUp=false;
					}
					else if (xPosition < (point.x + mouseMargin))
					{ //左
						onChangeCursor(CursorH, -9, -9);
						theSide=SIDE_LEFT;
						this.isPopUp=false;
					}
					else if (yPosition < (point.y + mouseMargin))
					{ //上
						onChangeCursor(CursorV, -9, -9);
						theSide=SIDE_TOP;
						this.isPopUp=false;
					}
					else if (yPosition > (point.y + this.height - mouseMargin))
					{ //下
						onChangeCursor(CursorV, -9, -9);
						theSide=SIDE_BOTTOM;
						this.isPopUp=false;
					}
					else
					{
						onChangeCursor(CursorNull);
						if (!isReSize && theStatus == 0)
						{
							theSide=0;
							this.isPopUp=true;
						}
					}
					event.updateAfterEvent();
				}
			}
			
			private function onChangeCursor(type:Class, xOffset:Number=0, yOffset:Number=0):void
			{
				if (currentType != type)
				{
					currentType=type;
					CursorManager.removeCursor(CursorManager.currentCursorID);
					if (type != null)
					{
						CursorManager.setCursor(type, 2, xOffset, yOffset);
					}
				}
			}
			
			private function onSaveRestore():void
			{
				var point:Point=new Point();
				theOldPoint=this.localToGlobal(point);
				theOldWidth=this.width;
				theOldHeight=this.height;
			}
			
			private function onGetRestore():void
			{
				this.x=theOldPoint.x;
				this.y=theOldPoint.y
				this.width=theOldWidth;
				this.height=theOldHeight;
			}
		]]>
	</fx:Script>
</s:TitleWindow>
